//            sendMessage.setText("Отлично! Вы записаны на понедельник! " +
//                    "Мы будем рады вас видеть. Если у вас возникнут " +
//                    "какие-либо вопросы или потребуется дополнительная " +
//                    "информация, не стесняйтесь обращаться к нам. Удачного" +
//                    " дня! \uD83C\uDF1E\n\nВаше место в очереди: 1");
--------------------------------
System.out.println(update.getMessage().getText());
                System.out.println(update.getMessage().getFrom().getUserName());

--------------------------------
                Calendar calendar = Calendar.getInstance();
                                int daysUntilMonday = Calendar.MONDAY - calendar.get(Calendar.DAY_OF_WEEK);
                                if (daysUntilMonday <= 0) {
                                    daysUntilMonday += 7;
                                }
                                calendar.add(Calendar.DAY_OF_MONTH, daysUntilMonday);
                                SimpleDateFormat sdf = new SimpleDateFormat("E, d MMM yyy");
                                System.out.println(sdf.format(calendar.getTime()));

-------------------------------------
System.out.println(update.getMessage().getMessageId());
        Message sent = bot.execute(sendMessage);
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setMessageId(sent.getMessageId());
        deleteMessage.setChatId(update.getMessage().getChatId());

--------------------------

        try {
            bot.execute(deleteMessage);
            System.out.println("рпограмма ");
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }


        ------------------------------------
        public class ExecuteQuery {
            public static void main(String[] args) {
                Connection connection = DatabaseConnection.getConnection();

                if (connection != null) {
                    try {
                        Statement statement = connection.createStatement();
                        String query = "SELECT * FROM your_table_name"; // Замените на ваш SQL-запрос
                        ResultSet resultSet = statement.executeQuery(query);

                        while (resultSet.next()) {

                            int id = resultSet.getInt("id");
                            String name = resultSet.getString("name");
                            System.out.println("ID: " + id + ", Name: " + name);
                        }

                        resultSet.close();
                        statement.close();
                        connection.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
---------------------------------
        try {
                    Statement statement = connection.createStatement();
                    String SQL = "SELECT * FROM Person";
                    ResultSet resultSet = statement.executeQuery(SQL);

                    while(resultSet.next()) {
                        Person person = new Person();

                        person.setId(resultSet.getInt("id"));
                        person.setName(resultSet.getString("name"));
                        person.setEmail(resultSet.getString("email"));
                        person.setAge(resultSet.getInt("age"));

                        people.add(person);
                    }

                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }


                ---------------
                 try {
                            Statement statement = connection.createStatement();
                            String SQL = "INSERT INTO Person VALUES(" + 1 + ",'" + person.getName() +
                                    "'," + person.getAge() + ",'" + person.getEmail() + "')";

                            statement.executeUpdate(SQL);
                        } catch (SQLException throwables) {
                            throwables.printStackTrace();
                        }


переделать инициализацию
передаем коллекцию как аргумент



Calendar calendar = Calendar.getInstance();
                int currentDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
                int currentHour = calendar.get(Calendar.HOUR_OF_DAY);

                // Найти ближайшую среду
                int daysUntilWednesday = (Calendar.WEDNESDAY - currentDayOfWeek + 7) % 7;
                if (daysUntilWednesday == 0 && currentHour >= 23) {
                    daysUntilWednesday = 7; // Если сегодня среда и время после 23:00, берем следующую среду
                }

                Calendar nextWednesday = (Calendar) calendar.clone();
                nextWednesday.add(Calendar.DAY_OF_MONTH, daysUntilWednesday);

                // Найти ближайший понедельник
                int daysUntilMonday = (Calendar.MONDAY - currentDayOfWeek + 7) % 7;
                if (daysUntilMonday == 0 && currentHour >= 23) {
                    daysUntilMonday = 7; // Если сегодня понедельник и время после 23:00, берем следующий понедельник
                }

                Calendar nextMonday = (Calendar) calendar.clone();
                nextMonday.add(Calendar.DAY_OF_MONTH, daysUntilMonday);

                // Вывод ближайших дней
                System.out.println("Ближайшая среда: " + nextWednesday.getTime());
                System.out.println("Ближайший понедельник: " + nextMonday.getTime());