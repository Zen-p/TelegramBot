package org.example.bot.dao;

import org.example.bot.Object.Person;
import org.example.bot.TelegramBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;


public class PersonDAO {
    int count;

    Map<Long, Person> bookedForMonday;
    Map<Long, Person> bookedForWednesday;
    Map<Long, Person> peopleInQueue;
    private Person lastPerson = new Person(null, 0, null);

    public Map<?, ?> getBookedForMonday() {
        return bookedForMonday;
    }
    public Map<?, ?> getBookedForWednesday() {
        return bookedForWednesday;
    }
    public Map<Long, Person> getPeopleInQueue() {
        return peopleInQueue;
    }
    public int getMondaySize() {
        return bookedForMonday.size();
    }
    public int getWednesdaySize() {
        return bookedForWednesday.size();
    }

    public void addToAQueue(Connection connection, SendMessage sendMessage, Person person) throws SQLException {
        Statement statement = null;
        try {
            statement = connection.createStatement();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        String SQL = "INSERT INTO peopleInQueue VALUES(" + person.getChatId() + ", \"" + person.getTelegramUsername() + "\", \"" + person.getNameAndSurname() + "\")";
        System.out.println(SQL);
        statement.executeUpdate(SQL);
        sendMessage.setText("–í—ã —Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å!\n –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã");
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> rowInline = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–ù–∞–∑–∞–¥");
        inlineKeyboardButton1.setCallbackData("back");
        rowInline.add(inlineKeyboardButton1);
        markupInline.setKeyboard(Collections.singletonList(rowInline));
        sendMessage.setReplyMarkup(markupInline);


    }

    public void initializeQueueList(Connection connection) throws SQLException {
        peopleInQueue = new LinkedHashMap<>();

        Statement statement = connection.createStatement();
        String SQL = "SELECT * FROM peopleInQueue";
        System.out.println(SQL);
        ResultSet resultSet = statement.executeQuery(SQL);

        while (resultSet.next()) {
            Person person = new Person();

            person.setChatId(resultSet.getLong("chatId"));
            person.setTelegramUsername(resultSet.getString("telegramUsername"));
            person.setNameAndSurname(resultSet.getString("nameAndSurname"));
            peopleInQueue.put(person.getChatId(), person);

        }

    }
    public void initializeLists(Connection connection) throws SQLException {
        bookedForMonday = new LinkedHashMap<>();
        bookedForWednesday = new LinkedHashMap<>();

        Statement statement = connection.createStatement();
        String SQL = "SELECT * FROM bookedForMonday";
        System.out.println(SQL);
        ResultSet resultSet = statement.executeQuery(SQL);

        while (resultSet.next()) {
            Person person = new Person();

            person.setChatId(resultSet.getLong("chatId"));
            person.setTelegramUsername(resultSet.getString("telegramUsername"));
            person.setNameAndSurname(resultSet.getString("nameAndSurname"));
            bookedForMonday.put(person.getChatId(), person);
        }

        SQL = "SELECT * FROM bookedForWednesday";
        resultSet = statement.executeQuery(SQL);
        while (resultSet.next()) {
            Person person = new Person();
            person.setChatId(resultSet.getLong("chatId"));
            person.setTelegramUsername(resultSet.getString("telegramUsername"));
            person.setNameAndSurname(resultSet.getString("nameAndSurname"));
            bookedForWednesday.put(person.getChatId(), person);

        }

    }

    public void next(SendMessage sendMessage, Person person, Connection connection, TelegramBot bot, Long chatId) throws SQLException {

        Calendar calendar = Calendar.getInstance();
        Statement statement = connection.createStatement();
        String dayOfWeek = (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY ? "bookedForMonday" : "bookedForWednesday");
        String SQL = "select * from " + dayOfWeek + " LIMIT 1";
        System.out.println(SQL);
        ResultSet resultSet = statement.executeQuery(SQL);
        System.out.println("–£—Å–ø–µ—à–Ω–æ");
        while (resultSet.next()) {
            person.setChatId(resultSet.getLong("chatId"));
            person.setTelegramUsername(resultSet.getString("telegramUsername"));
            person.setNameAndSurname(resultSet.getString("nameAndSurname"));
        }

        if (person.getNameAndSurname() == null && person.getTelegramUsername() == null) {
            sendMessage.setText("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞");
            System.out.println(person.getChatId());
        } else {


            sendMessage.setText("–ë—Ä–∞—Ç, —â–∞ —Ç–µ–±—è –ø–æ—Å—Ç—Ä–∏–≥—É—Ç ‚Äî –ø–æ –∫—Ä–∞—Å–æ—Ç–µ –±—É–¥–µ—Ç! \n" +
                    "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä —É–∂–µ —Ä—É–∫—É –Ω–∞–±–∏–ª, –Ω–æ–∂–Ω–∏—Ü—ã –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç —Å—Ç—Ä–µ–ª—è—é—Ç. –¢—ã —Ç–æ–ª—å–∫–æ –Ω–µ –¥–µ—Ä–≥–∞–π—Å—è, –∞ —Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è, –∫–∞–∫ –±–∞—Ä–∞–Ω–∞ –Ω–∞ –∂–∏–≤—É—é, –ø–æ–¥—Å—Ç—Ä–∏–≥—É—Ç, –∏ –±—É–¥–µ—à—å —Ä–æ–≤–Ω—ã–π –∫–∞–∫ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –ø–æ–Ω—è–ª? \n" +
                    "–í –∫—Ä–µ—Å–ª–æ —Å–∞–¥–∏—Å—å, –Ω–µ —Ç—É–ø–∏, –≤—ã—Ö–æ–¥–∏—à—å –ø–æ—Ç–æ–º –∫–∞–∫ –±–æ—Å—Å, –≤—Å–µ –æ–≥–ª—è–¥—ã–≤–∞—Ç—å—Å—è –±—É–¥—É—Ç!");
            sendMessage.setChatId(person.getChatId());
            try {
                bot.execute(sendMessage);
                System.out.println("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }

            sendMessage.setChatId(chatId);


            sendMessage.setText("–°–ª–µ–¥—É—é—â–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n\n" + person.toStringForAdmin());

            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsline = new ArrayList<>();
            List<InlineKeyboardButton> rowInline_1 = new ArrayList<>();

            InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
            inlineKeyboardButton1.setText("–Ω–∞–∑–∞–¥");
            inlineKeyboardButton1.setCallbackData("back_for_admin");
            rowInline_1.add(inlineKeyboardButton1);

            List<InlineKeyboardButton> rowInline_2 = new ArrayList<>();
            InlineKeyboardButton done = new InlineKeyboardButton();
            done.setText("–ü–æ—Å—Ç—Ä–∏–∂–µ–Ω(–∞)! üíáüèø‚Äç");
            done.setCallbackData("done");


            rowInline_2.add(done);

            rowsline.add(rowInline_2);
            rowsline.add(rowInline_1);

            markupInline.setKeyboard(rowsline);
            sendMessage.setReplyMarkup(markupInline);
            lastPerson = person;
        }


    }
    public void notifyUsers(Calendar calendar, SendMessage sendMessage, TelegramBot bot) throws TelegramApiException {
        if (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {


            for (Map.Entry<Long, Person> entry : bookedForMonday.entrySet()) {

                if (count == 0) {
                    bot.deletePreviousMessage(entry.getKey());
                    sendMessage.setChatId(entry.getKey());
                    sendMessage.setText("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç! \uD83D\uDE0A –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞—à–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∏–∂–∫–∞ " +
                            "–≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. \uD83D\uDC87\u200D‚ôÇ\uFE0F –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ" +
                            " —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. \uD83D\uDCDE" +
                            " –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∏–∂–∫—É. " +
                            "–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! \uD83D\uDC87\u200D‚ôÄ\uFE0F");
                    count++;
                    try {
                        bot.execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                } else if (count == 1) {
                    bot.deletePreviousMessage(entry.getKey());
                    sendMessage.setChatId(entry.getKey());
                    sendMessage.setText("–ë—Ä–∞—Ç, —â–∞ —Ç–µ–±—è –ø–æ—Å—Ç—Ä–∏–≥—É—Ç ‚Äî –ø–æ –∫—Ä–∞—Å–æ—Ç–µ –±—É–¥–µ—Ç! \n" +
                            "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä —É–∂–µ —Ä—É–∫—É –Ω–∞–±–∏–ª, –Ω–æ–∂–Ω–∏—Ü—ã –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç —Å—Ç—Ä–µ–ª—è—é—Ç. –¢—ã —Ç–æ–ª—å–∫–æ –Ω–µ –¥–µ—Ä–≥–∞–π—Å—è, –∞ —Ç–æ —Å–µ–π—á–∞—Å —Ç–µ–±—è, –∫–∞–∫ –±–∞—Ä–∞–Ω–∞ " +
                            "–Ω–∞ –∂–∏–≤—É—é, –ø–æ–¥—Å—Ç—Ä–∏–≥—É—Ç, –∏ –±—É–¥–µ—à—å —Ä–æ–≤–Ω—ã–π –∫–∞–∫ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –ø–æ–Ω—è–ª? \n" +
                            "–í –∫—Ä–µ—Å–ª–æ —Å–∞–¥–∏—Å—å, –Ω–µ —Ç—É–ø–∏, –≤—ã—Ö–æ–¥–∏—à—å –ø–æ—Ç–æ–º –∫–∞–∫ –±–æ—Å—Å, –≤—Å–µ –æ–≥–ª—è–¥—ã–≤–∞—Ç—å—Å—è –±—É–¥—É—Ç!");
                    count++;
                    try {
                        bot.execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    bot.deletePreviousMessage(entry.getKey());
                    sendMessage.setChatId(entry.getKey());
                    sendMessage.setText("–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Å—Ç–∞–ª–∞ –±–ª–∏–∂–µ!\n\n–≤–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: " + count);
                    try {
                        bot.execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                    count++;
                }
            }
            count = 0;
        } else if (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY) {

            for (Map.Entry<Long, Person> entry : bookedForWednesday.entrySet()) {

                if (count == 0) {
                    sendMessage.setChatId(entry.getKey());
                    sendMessage.setText("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç! \uD83D\uDE0A –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞—à–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∏–∂–∫–∞ " +
                            "–≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. \uD83D\uDC87\u200D‚ôÇ\uFE0F –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ" +
                            " —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. \uD83D\uDCDE" +
                            " –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∏–∂–∫—É. " +
                            "–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! \uD83D\uDC87\u200D‚ôÄ\uFE0F");
                    count++;
                    try {
                        bot.execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    sendMessage.setChatId(entry.getKey());
                    sendMessage.setText("–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Å—Ç–∞–ª–∞ –±–ª–∏–∂–µ!\n\n–≤–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: " + count);
                    try {
                        bot.execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                    count++;
                }
            }
            count = 0;
        }


    }
    public void done(SendMessage sendMessage, Person person, Connection connection, Long chatId, TelegramBot bot) throws SQLException, TelegramApiException {
        bot.deletePreviousMessage(chatId);
        Calendar calendar = Calendar.getInstance();
        Statement statement = connection.createStatement();


        String dayOfWeek = (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY ? "bookedForMonday" : "bookedForWednesday");
        String SQL = "delete from " + dayOfWeek + "\n" + "where chatId = " + lastPerson.getChatId();
        initializeLists(connection);
        notifyUsers(calendar, sendMessage, bot);
        sendMessage.setChatId(chatId);
        int res = statement.executeUpdate(SQL);
        System.out.println(SQL);

        SQL = "select * from " + dayOfWeek + " LIMIT 1";
        System.out.println(SQL);
        ResultSet resultSet = statement.executeQuery(SQL);
        System.out.println("–£—Å–ø–µ—à–Ω–æ");
        while (resultSet.next()) {
            person.setChatId(resultSet.getLong("chatId"));
            person.setTelegramUsername(resultSet.getString("telegramUsername"));
            person.setNameAndSurname(resultSet.getString("nameAndSurname"));
        }

        if (person.getNameAndSurname() == null && person.getTelegramUsername() == null) {
            sendMessage.setText("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞");
            System.out.println(person.getChatId());
        } else {

            sendMessage.setText("–°–ª–µ–¥—É—é—â–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n\n" + person.toStringForAdmin());

            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsline = new ArrayList<>();
            List<InlineKeyboardButton> rowInline_1 = new ArrayList<>();

            InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
            inlineKeyboardButton1.setText("–Ω–∞–∑–∞–¥");
            inlineKeyboardButton1.setCallbackData("back_for_admin");
            rowInline_1.add(inlineKeyboardButton1);

            List<InlineKeyboardButton> rowInline_2 = new ArrayList<>();
            InlineKeyboardButton done = new InlineKeyboardButton();
            done.setText("–ü–æ—Å—Ç—Ä–∏–∂–µ–Ω(–∞)! üíáüèø‚Äç");
            done.setCallbackData("done");

            rowInline_2.add(done);

            rowsline.add(rowInline_2);
            rowsline.add(rowInline_1);

            markupInline.setKeyboard(rowsline);
            sendMessage.setReplyMarkup(markupInline);
            lastPerson = person;
        }

    }

    public void addNewUserForMonday(Person person, Connection connection, SendMessage sendMessage) throws SQLException {

        Statement statement = connection.createStatement();
        String SQL = "INSERT INTO bookedForMonday VALUES(" + person.getChatId() + ", \"" + person.getTelegramUsername() + "\", \"" + person.getNameAndSurname() + "\")";
        System.out.println(SQL);
        statement.executeUpdate(SQL);
        sendMessage.setText("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: " + (getMondaySize() + 1));
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();

        List<InlineKeyboardButton> rowInline = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();

        inlineKeyboardButton1.setText("–ù–∞–∑–∞–¥");
        inlineKeyboardButton1.setCallbackData("back");

        rowInline.add(inlineKeyboardButton1);

        markupInline.setKeyboard(Collections.singletonList(rowInline));
        sendMessage.setReplyMarkup(markupInline);

    }
    public void addNewUserForWednesday(Person person, Connection connection, SendMessage sendMessage) throws SQLException {

        Statement statement = connection.createStatement();
        String SQL = "INSERT INTO bookedForWednesday VALUES(" + person.getChatId() + ", \"" + person.getTelegramUsername() + "\", \"" + person.getNameAndSurname() + "\")";
        System.out.println(SQL);
        statement.executeUpdate(SQL);
        sendMessage.setText("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: " + (getWednesdaySize() + 1));


    }

    public void seeTheQueue(SendMessage sendMessage, TelegramBot bot) {
        if (!bookedForMonday.isEmpty()) {
            sendMessage.setText("–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:");
            try {
                bot.getListOfMessages().add(bot.execute(sendMessage));
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }

            for (Person p : bookedForMonday.values()) {
                sendMessage.setText(p.toStringForAdmin());
                try {
                    bot.getListOfMessages().add(bot.execute(sendMessage));
                } catch (TelegramApiException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        if (!bookedForWednesday.isEmpty()) {
            sendMessage.setText("–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å—Ä–µ–¥—É:");
            try {
                bot.getListOfMessages().add(bot.execute(sendMessage));
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }

            for (Person p : bookedForWednesday.values()) {
                sendMessage.setText(p.toStringForAdmin());
                try {
                    bot.getListOfMessages().add(bot.execute(sendMessage));
                } catch (TelegramApiException e) {
                    throw new RuntimeException(e);
                }
            }
        }


        sendMessage.setText("–ú–µ–Ω—é: ");
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();

        List<InlineKeyboardButton> rowInline = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–ù–∞–∑–∞–¥");
        inlineKeyboardButton1.setCallbackData("back_for_admin");

        rowInline.add(inlineKeyboardButton1);

        markupInline.setKeyboard(Collections.singletonList(rowInline));
        sendMessage.setReplyMarkup(markupInline);


    }
    public void passQueue(SendMessage sendMessage, Connection connection, long chatId, String table) throws SQLException {
        Statement statement = connection.createStatement();
        String SQL = "Delete from " + table + " \nwhere chatId = " + chatId;
        System.out.println(SQL);
        int resultSet = statement.executeUpdate(SQL);
        System.out.println("–ø—Ä–æ—à–ª–æ");
        sendMessage.setText("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å!");
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();

        List<InlineKeyboardButton> rowInline = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();

        inlineKeyboardButton1.setText("–ù–∞–∑–∞–¥");
        inlineKeyboardButton1.setCallbackData("back");

        rowInline.add(inlineKeyboardButton1);

        markupInline.setKeyboard(Collections.singletonList(rowInline));
        sendMessage.setReplyMarkup(markupInline);


    }

}
